<?xml version="1.0"?>
<!--
    ExcepGen: PMD rule set
    This file is part of ExcepGen.
    Copyright (c) 2008, 2009, Iparelan Solutions, LLC. All rights reserved.

    ExcepGen is free software: you can redistribute it and/or modify it under
    the terms of the GNU Lesser General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    ExcepGen is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with ExcepGen. If not, see <http://www.gnu.org/licenses/>.

    author: Greg Mattes
    version: July 2008
-->
<ruleset name="ExcepGen"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>PMD static code analysis rule set for ExcepGen</description>

    <!--
        Some notes on the format and maintenance of this file:

        1. Only specify each rule once. The presence of a repeated rule
        manifests itself in duplicated rule violation warnings. A list of all
        configured rules is generated by the PMD Ant task when Ant's verbose
        flag (-v) is on.

        1.1 When specifying property values explicitly in an individual rule
        element, exclude that rule from any ruleset that includes it. Mark the
        "excluded" rule with an "avoids duplication" comment for clarity.

        For example, to include all rules in the "imports" ruleset,
        configuring the "TooManyStaticImports" rule to have a threshold higher
        than the default, you might write:

        Specifiy the "TooManyStaticImports" rule by itself:

        <rule ref="rulesets/imports.xml/TooManyStaticImports">
            <properties>
                <property name="maximumStaticImports" value="10"/>
            </properties>
        </rule>

        The specify the rest of the imports rule set, omitting the
        "TooManyStaticImports" rule to avoid duplication:

        <rule ref="rulesets/imports.xml">
            <exclude name="TooManyStaticImports"/>
        </rule>

        1.2 Rule duplication may also occur when some rule is contained in
        multiple "standard" rulesets provided in the PMD distribution. For
        example, the "UnusedImports" rule is contained in both the "imports"
        ruleset and the "typeresolution" ruleset. Write sufficient "exclude"
        statements to ensure the such a rule is included only once.

        2. Prefer excludes to includes. Such a style remains open to the
        addition of new PMD rules by only excluding unwanted rules rather than
        including the rules deemed interesting when this file was written.
    -->

    <!--
        TODO:

        1. For those rules that are excluded, how many violations are there?
        Occasionally (e.g. every few months) consider including some of these
        rules, but suppressing "acceptable" rule violations with
        @SuppressWarnings() or // SuppressWarnings.

        2. Have (at least) two rule sets? One for "common" violations, another
        for "infrequent" violations. The idea is that the day-to-day analysis
        during routine development should be fast and catch common things. No
        sense in searching for things that have a low likelihood of being
        found. The "fast" rule set should most likely remove much, if not all,
        of the "design" ruleset. The "complete" ("slow" is a negative term :)
        rule set should be run before check-in and for testing and release
        candidates.
    -->

    <!--
        Wishlist for new custom PMD rules (pmd/bin/designer.sh) or coverage
        from other tools:

        1. Rule that finds all "legacy" concurrency constructs: prefer
           java.util.concurrent stuff.

        2. Display a warnings total for console output.

        3. Rule that detects Law of Demeter stuff like: foo().bar().baz();

        4. Magic numbers.

        5. StringBuilder rules, currently PMD has only "legacy" StringBuffer
           rules.

        6. A warning that tells when "// SuppressWarnings" or
           "@SuppressWarnings("PMD.*")" do not actually suppress any rule
           violation warnings. "Stale PMD suppression warning." TODO: this very
           well may be a command line switch, etc. already...

        7. Can the "AvoidInstantiatingObjectsInLoops" rule detect
           instantiation through a factory?

        8. Log/throw idiom: a common idiom used in the code base is to catch
           an exception, create a new exception to wrap the cause, log the new
           exception, and throw the new exception. The "PreserveStackTrace" rule
           registers a false positive with this idiom.

        9. Ensure that log messages below some threshold, "warning" most
           likely, are wrapped like the example below. Also ensure that the log
           level checked in the conditional is the same as the call to log the
           message, e.g. produce a warning if isLoggableFinest() is invoked to
           decided whether a called to info() should be made.

                       if (LOGGER.isLoggableFinest()) {
                           LOGGER.finest("foo");
                       }

        10. A rule that detects when @Override [cs]ould have been applied.
    -->

    <rule ref="rulesets/basic.xml"/>
    <rule ref="rulesets/braces.xml"/>
    <rule ref="rulesets/clone.xml"/>
    <rule ref="rulesets/codesize.xml">
        <exclude name="CyclomaticComplexity"/> <!-- avoids duplication -->
        <exclude name="ExcessiveMethodLength"/> <!-- avoids duplication -->
        <exclude name="NcssMethodCount"/> <!-- avoids duplication -->
        <exclude name="TooManyMethods"/> <!-- avoids duplication -->
    </rule>
    <rule ref="rulesets/codesize.xml/CyclomaticComplexity">
        <properties>
            <property name="reportLevel" value="10"/> <!-- TODO: still evaluating, default is 10 -->
            <property name="showClassesComplexity" value="false"/> <!-- The class complexity average is a dubious statistic; reporting method complexity is sufficient -->
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="100"/> <!-- TODO: still evaluating, default is 100 (sync with Checkstyle.MethodLength)  -->
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/NcssMethodCount">
        <properties>
            <property name="minimum" value="50"/> <!-- TODO: still evaluating, default is 100 (sync with Checkstyle.JavaNCSS) -->
        </properties>
    </rule>
    <rule ref="rulesets/codesize.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="10"/> <!-- TODO: still evaluating, default is 10 -->
        </properties>
    </rule>
    <rule ref="rulesets/controversial.xml">
        <exclude name="AtLeastOneConstructor"/>   <!-- Not clear why this is useful                                 -->
        <exclude name="AvoidFinalLocalVariable"/> <!-- See "Hardcore Java," Chapter 2: "The Final Story"            -->
        <exclude name="AvoidUsingNativeCode"/>    <!-- Decisions like this will not require PMD to tell us about it -->
        <exclude name="AvoidUsingVolatile"/>      <!-- Learn about volatile in "Java Concurrency in Practice"       -->
        <exclude name="CallSuperInConstructor"/>  <!-- Rule cannot know which super() overload should be called     -->
        <exclude name="DataflowAnomalyAnalysis"/> <!-- Rule does not appear to be correct                           -->
        <exclude name="DefaultPackage"/>          <!-- Package private is legitimate                                -->
        <exclude name="OnlyOneReturn"/>           <!-- Certainly a good ideal to strive for, but not an absolute    -->
        <exclude name="UnnecessaryParentheses"/>  <!-- Extra parens can clarify expressions when used tastefully    -->
    </rule>
    <rule ref="rulesets/coupling.xml">
        <exclude name="CouplingBetweenObjects"/> <!-- avoids duplication -->
        <exclude name="ExcessiveImports"/>       <!-- avoids duplication -->
    </rule>
    <rule ref="rulesets/coupling.xml/ExcessiveImports">
        <properties>
            <property name="minimum" value="40"/> <!-- Default is 30, The "One LOC does one thing" principle tends to increases imports -->
        </properties>
    </rule>
    <rule ref="rulesets/coupling.xml/CouplingBetweenObjects">
        <properties>
            <property name="threshold" value="20"/> <!-- TODO: still evaluating, default is 20 -->
        </properties>
    </rule>
    <rule ref="rulesets/design.xml">
        <exclude name="AbstractClassWithoutAnyMethod"/>              <!-- abstract -> non-instantable, not protected ctor        -->
        <exclude name="AbstractClassWithoutAbstractMethod"/>         <!-- abstract -> non-instantable, not protected ctor        -->
        <exclude name="AvoidConstantsInterface"/>                    <!-- accept or reject advice of Effective Java item 19?     -->
        <exclude name="CloseResource"/>                              <!-- avoids duplication                                     -->
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/> <!-- Default behavior of no-op is OK                        -->
        <exclude name="NonStaticInitializer"/>                       <!-- Non-static initializers are OK                         -->
        <exclude name="UnnecessaryLocalBeforeReturn"/>               <!-- One line of code does one thing, "return" is one thing -->
        <exclude name="UseLocaleWithCaseConversions"/>               <!-- TODO: Not thoroughly understood, L10n/I18n issue       -->
        <!-- Consider excluding: AssignmentToNonFinalStatic                                                 -->
        <!-- Consider excluding: MissingStaticMethodInNonInstantiatableClass                                -->
        <!-- Consider excluding: PositionLiteralsFirstInComparisons                                         -->
        <!-- Consider excluding: UncommentedEmptyConstructor                                                -->
        <!-- Consider excluding: UncommentedEmptyMethod                                                     -->
        <!-- Consider excluding: UnsynchronizedStaticDateFormatter, can it detect proper ThreadLocal usage? -->
    </rule>
    <rule ref="rulesets/design.xml/CloseResource">
        <properties>
            <property name="types" value="Connection,Statement,ResultSet,OutgoingMessageBuilder"/>
        </properties>
    </rule>
    <rule ref="rulesets/finalizers.xml"/>
    <rule ref="rulesets/imports.xml">
        <exclude name="TooManyStaticImports"/> <!-- avoids duplication -->
    </rule>
    <rule ref="rulesets/imports.xml/TooManyStaticImports">
        <properties>
            <property name="maximumStaticImports" value="10"/>
        </properties>
    </rule>
    <rule ref="rulesets/javabeans.xml">
        <!--
            Generating too many false positives

            TODO: configure this to include files that are designed to specify
            Beans.
        -->
        <exclude name="BeanMembersShouldSerialize"/>
    </rule>
    <rule ref="rulesets/logging-java.xml"/>
    <rule ref="rulesets/migrating.xml"/>
    <rule ref="rulesets/naming.xml">
        <!--
            Semantic value, not string length, determines whether a symbol is
            well-chosen. Prefer symbols that are long enough, but no
            longer. Spell entire words, don't be cryptic. Camel-case or
            all-capitals for constants, NO UNDERBARS, NO "Hungarian Notation."
        -->
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
        <exclude name="AbstractNaming"/> <!-- Classes may be named with any appropropriate name, see Checkstyle.AbstractClassName -->
    </rule>
    <rule ref="rulesets/optimizations.xml"/>
    <rule ref="rulesets/strictexception.xml"/>
    <rule ref="rulesets/strings.xml">
        <exclude name="AvoidDuplicateLiterals"/> <!-- avoids duplication -->
    </rule>
    <rule ref="rulesets/strings.xml/AvoidDuplicateLiterals">
        <properties>
            <property name="skipAnnotations" value="true"/> <!-- no warnings for repeated @SuppressWarnings("serial"), etc. -->
        </properties>
    </rule>
    <rule ref="rulesets/sunsecure.xml"/>
    <rule ref="rulesets/typeresolution.xml">
        <exclude name="UnusedImports"/>                     <!-- avoids duplication, included in the "imports" ruleset         -->
        <exclude name="SignatureDeclareThrowsException"/>   <!-- avoids duplication, included in the "strictexception" ruleset -->
        <exclude name="CloneMethodMustImplementCloneable"/> <!-- avoids duplication, included in the "clone" ruleset           -->
        <exclude name="LooseCoupling"/>                     <!-- avoids duplication, included in the "coupling" ruleset        -->
    </rule>
    <rule ref="rulesets/unusedcode.xml"/>
</ruleset>